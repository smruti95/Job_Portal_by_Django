# Generated by Django 5.2.4 on 2025-08-24 03:32

import accounts.models
import django.core.validators
import django.db.models.functions.text
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the record was created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the record was last updated.', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Stable public UUID identifier.', primary_key=True, serialize=False, verbose_name='public id')),
                ('email', models.EmailField(help_text='Primary email used to sign in.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('first_name', models.CharField(blank=True, help_text='User first name.', max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, help_text='User last name.', max_length=150, verbose_name='last name')),
                ('phone', models.CharField(blank=True, help_text='User contact number.', max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number with 7â€“15 digits (optionally prefixed by +).', regex='^\\+?[0-9]{7,15}$')], verbose_name='phone number')),
                ('is_recruiter', models.BooleanField(db_index=True, default=False, help_text='Marks a user as recruiter/employer.', verbose_name='recruiter?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'indexes': [models.Index(django.db.models.functions.text.Lower('email'), name='accounts_user_email_ci_idx')],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='accounts_user_email_ci_uniq')],
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
    ]
